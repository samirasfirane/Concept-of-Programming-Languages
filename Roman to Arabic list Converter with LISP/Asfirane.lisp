(defun toroman (list)
"Process the list received as argument recursively and calls Break-Roman function to convert each list member natural (Arabic) numeral to the corresponding roman numeral and displays the list."
 (format t "~&~a~5T  is  "(car list))      
(break-roman(car list))
      (cond ((> (list-length list) 1) (toroman (cdr list)))))

(defun break-Roman(number)
  "Converts the natural (Arabic) numeral received as argument to the corresponding roman numeral and returns it."

     (if(>= number 1000) (format t "~a" "M"))
  (cond ((>= number 1000) (break-roman (- number 1000)))
        ((and (>= number 900) (< number 1000)) (format t "~a" "CM")))
  (cond ((and (>= number 900) (< number 1000)) (break-roman (- number 900)))
        ((and (>= number 500) (< number 900)) (format t "~a" "D")))
  (cond ((and (>= number 500) (< number 900)) (break-roman (- number 500)))
        ((and (>= number 400) (< number 500)) (format t "~a" "CD")))
  (cond ((and (>= number 400) (< number 500)) (break-roman (- number 400)))
        ((and (>= number 100) (< number 400)) (format t "~a" "C")))
  (cond ((and (>= number 100) (< number 400)) (break-roman (- number 100)))
        ((and (>= number 90) (< number 100)) (format t "~a" "XC")))
  (cond ((and (>= number 90) (< number 100)) (break-roman (- number 90)))
        ((and (>= number 50) (< number 90)) (format t "~a" "L")))
  (cond ((and (>= number 50) (< number 90)) (break-roman (- number 50)))
        ((and (>= number 40) (< number 50)) (format t "~a" "XL")))
  (cond ((and (>= number 40) (< number 50)) (break-roman (- number 40)))
        ((and (>= number 10) (< number 40)) (format t "~a" "X")))
  (cond ((and (>= number 10) (< number 40)) (break-roman (- number 10)))
        ((and (>= number 9) (< number 10)) (format t "~a" "IX")))
  (cond ((and (>= number 9) (< number 10)) (break-roman (- number 9)))
        ((and (>= number 5) (< number 9)) (format t "~a" "V")))
  (cond ((and (>= number 5) (< number 9)) (break-roman (- number 5)))
        ((and (>= number 4) (< number 5)) (format t "~a" "IV")))
  (cond ((and (>= number 4) (< number 5)) (break-roman (- number 4)))
        ((and (>= number 1) (< number 4)) (format t "~a" "I")))
  (cond ((and (>= number 1) (< number 4)) (break-roman (- number 1)))))


(defun tonatural (list)
"Process the list argument recursively and calls Break-Arabic function to convert each list roman numeral to the corresponding natural (Arabic) numeral and displays the list."
(format t "~&~a~5T is  ~d "(car list) (break-arabic(car list)))
  (cond ((> (list-length list) 1) (tonatural (cdr list)))))

(defun break-Arabic(string)
  "Converts the roman numeral received as argument to the corresponding natural (Arabic) numeral and returns it."

(if(>(length string) 0)   (cond ((string= (subseq string 0 1 ) "M") (if(eq(break-Arabic(subseq string 1)) NIL)(+ 1000  0)
                                                                                                                      (+ 1000  (break-Arabic(subseq string 1)))))
((and  (>(length string) 1)  (string= (subseq string 0 1) "C")(string= (subseq string 0 2)"CM"))(if(eq(break-Arabic(subseq string 2)) NIL)(+ 900  0)
                                                                                                                      (+ 900 (break-Arabic(subseq string 2)))))
((and (>(length string) 1) (string= (subseq string 0 1) "C")(string= (subseq string 0 2)"CD"))(if(eq(break-Arabic(subseq string 2)) NIL)(+ 400  0)
                                                                                                                      (+ 400 (break-Arabic(subseq string 2)))))
                                 ((string= (subseq string 0 1 ) "D") (if(eq(break-Arabic(subseq string 1)) NIL)(+ 500  0)
                                                                                                                      (+ 500 (break-Arabic(subseq string 1)))))
                                 ((string= (subseq string 0 1 ) "C") (if(eq(break-Arabic(subseq string 1)) NIL)(+ 100  0)
                                                                                                                      (+ 100 (break-Arabic(subseq string 1)))))
((and (>(length string) 1) (string= (subseq string 0 1) "X")(string= (subseq string 0 2)"XC"))(if(eq(break-Arabic(subseq string 2)) NIL)(+ 90  0)
                                                                                                                      (+ 90 (break-Arabic(subseq string 2)))))
((and (>(length string) 1) (string= (subseq string 0 1) "X")(string= (subseq string 0 2)"XL"))(if(eq(break-Arabic(subseq string 2)) NIL)(+ 40  0)
                                                                                                                      (+ 40 (break-Arabic(subseq string 2)))))
                                 ((string= (subseq string 0 1 ) "L") (if(eq(break-Arabic(subseq string 1)) NIL)(+ 50  0)
                                                                                                                      (+ 50 (break-Arabic(subseq string 1)))))
                                 ((string= (subseq string 0 1 ) "X") (if(eq(break-Arabic(subseq string 1)) NIL)(+ 10  0)
                                                                                                                      (+ 10 (break-Arabic(subseq string 1)))))
((and (>(length string) 1) (string= (subseq string 0 1) "I")(string= (subseq string 0 2)"IX"))(if(eq(break-Arabic(subseq string 2)) NIL)(+ 9  0)
                                                                                                                      (+ 9 (break-Arabic(subseq string 2)))))
((and (>(length string) 1) (string= (subseq string 0 1) "I")(string= (subseq string 0 2)"IV"))(if(eq(break-Arabic(subseq string 2)) NIL)(+ 4  0)
                                                                                                                      (+ 4 (break-Arabic(subseq string 2)))))
                                 ((string= (subseq string 0 1 ) "V") (if(eq(break-Arabic(subseq string 1)) NIL)(+ 5  0)
                                                                                                                      (+ 5 (break-Arabic(subseq string 1)))))
                                 ((string= (subseq string 0 1 ) "I") (if(eq(break-Arabic(subseq string 1)) NIL)(+ 1  0)
                                                                                                                      (+ 1 (break-Arabic(subseq string 1)))))
)))


